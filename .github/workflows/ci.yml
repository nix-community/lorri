env:
  LORRI_NO_INSTALL_PANIC_HANDLER: absolutely
jobs:
  nix-build_stable-macos-latest:
    name: nix-build [nixos stable] (macos-latest)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Nix
        uses: cachix/install-nix-action@v14.1
      - name: Cachix
        uses: cachix/cachix-action@v10
        with:
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          name: nix-community
      - name: Build
        run: nix-build
      - name: Install
        run: nix-env -i ./result
      - name: Self-upgrade
        run: lorri self-upgrade local $(pwd)
  nix-build_stable-ubuntu-latest:
    name: nix-build [nixos stable] (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Nix
        uses: cachix/install-nix-action@v14.1
      - name: Cachix
        uses: cachix/cachix-action@v10
        with:
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          name: nix-community
      - name: Build
        run: nix-build
      - name: Install
        run: nix-env -i ./result
      - name: Self-upgrade
        run: lorri self-upgrade local $(pwd)
  overlay-macos-latest:
    name: Overlay builds (macos-latest)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: null
      - name: Nix
        uses: cachix/install-nix-action@v14.1
      - name: Cachix
        uses: cachix/cachix-action@v10
        with:
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          name: nix-community
      - name: Build w/ overlay (stable)
        run: nix-build ./nix/overlay.nix -A lorri --arg pkgs ./nix/nixpkgs-stable.json
  overlay-ubuntu-latest:
    name: Overlay builds (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: null
      - name: Nix
        uses: cachix/install-nix-action@v14.1
      - name: Cachix
        uses: cachix/cachix-action@v10
        with:
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          name: nix-community
      - name: Build w/ overlay (stable)
        run: nix-build ./nix/overlay.nix -A lorri --arg pkgs ./nix/nixpkgs-stable.json
  rust-each-unit-macos-latest:
    name: Rust individual tests (macos-latest)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: null
      - name: Nix
        uses: cachix/install-nix-action@v14.1
      - name: Cachix
        uses: cachix/cachix-action@v10
        with:
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          name: nix-community
      - name: Add rustc to PATH
        run: |
          set -euo pipefail
          rustc_path="$(nix-build -A rustc nix/nixpkgs-stable.nix)/bin"
          echo "$rustc_path" >> "$GITHUB_PATH"
      - name: print PATH
        run: printenv PATH
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: CI bisection tests
        run: |
          nix-build \
            --out-link ./ci-tests \
            --arg isDevelopmentShell false \
            -A ci.testsuite-eachunit \
            shell.nix \
            && ./ci-tests
  rust-macos-latest:
    name: Rust and CI tests (macos-latest)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: null
      - name: Nix
        uses: cachix/install-nix-action@v14.1
      - name: Cachix
        uses: cachix/cachix-action@v10
        with:
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          name: nix-community
      - name: Add rustc to PATH
        run: |
          set -euo pipefail
          rustc_path="$(nix-build -A rustc nix/nixpkgs-stable.nix)/bin"
          echo "$rustc_path" >> "$GITHUB_PATH"
      - name: print PATH
        run: printenv PATH
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: CI tests
        run: |
          nix-build \
            --out-link ./ci-tests \
            --arg isDevelopmentShell false \
            -A ci.testsuite \
            shell.nix \
            && ./ci-tests
  rust-ubuntu-latest:
    name: Rust and CI tests (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: null
      - name: Nix
        uses: cachix/install-nix-action@v14.1
      - name: Cachix
        uses: cachix/cachix-action@v10
        with:
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          name: nix-community
      - name: Add rustc to PATH
        run: |
          set -euo pipefail
          rustc_path="$(nix-build -A rustc nix/nixpkgs-stable.nix)/bin"
          echo "$rustc_path" >> "$GITHUB_PATH"
      - name: print PATH
        run: printenv PATH
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: CI tests
        run: |
          nix-build \
            --out-link ./ci-tests \
            --arg isDevelopmentShell false \
            -A ci.testsuite \
            shell.nix \
            && ./ci-tests
name: CI
"on":
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - master
  workflow_dispatch: {}
